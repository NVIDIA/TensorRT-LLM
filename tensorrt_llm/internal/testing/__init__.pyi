import enum

import bindings


class QuantMethod(enum.IntEnum):
    """Quantization Method"""

    NONE = 0
    """No Quantization"""

    SMOOTH_QUANT = 1
    """Smooth Quantization"""

class OutputContentType(enum.IntEnum):
    """Output Content Type"""

    NONE = 0
    """No Output Content"""

    CONTEXT_LOGITS = 1
    """Context Logits"""

    GENERATION_LOGITS = 2
    """Generation Logits"""

    LOG_PROBS = 3
    """Log Probs"""

    CUM_LOG_PROBS = 4
    """Cumulative Log"""

class ModelSpec:
    def __init__(self, arg0: str, arg1: bindings.DataType, /) -> None: ...

    def use_gpt_plugin(self) -> ModelSpec: ...

    def use_packed_input(self) -> ModelSpec: ...

    def set_kv_cache_type(self, arg: bindings.KVCacheType, /) -> ModelSpec: ...

    def use_decoder_per_request(self) -> ModelSpec: ...

    def use_tensor_parallelism(self, arg: int, /) -> ModelSpec: ...

    def use_pipeline_parallelism(self, arg: int, /) -> ModelSpec: ...

    def use_context_parallelism(self, arg: int, /) -> ModelSpec: ...

    def set_draft_tokens(self, arg: int, /) -> ModelSpec: ...

    def use_accept_by_logits(self) -> ModelSpec: ...

    def use_mamba_plugin(self) -> ModelSpec: ...

    def gather_logits(self) -> ModelSpec: ...

    def replace_logits(self) -> ModelSpec: ...

    def return_log_probs(self) -> ModelSpec: ...

    def smoke_test(self) -> ModelSpec: ...

    def use_medusa(self) -> ModelSpec: ...

    def use_eagle(self) -> ModelSpec: ...

    def use_lookahead_decoding(self) -> ModelSpec: ...

    def use_explicit_draft_tokens_decoding(self) -> ModelSpec: ...

    def use_draft_tokens_external_decoding(self) -> ModelSpec: ...

    def use_logits(self) -> bool: ...

    def use_multiple_profiles(self) -> ModelSpec: ...

    def set_max_input_length(self, arg: int, /) -> ModelSpec: ...

    def set_max_output_length(self, arg: int, /) -> ModelSpec: ...

    def set_quant_method(self, arg: QuantMethod, /) -> ModelSpec: ...

    def use_lora_plugin(self) -> ModelSpec: ...

    def get_input_file(self) -> str: ...

    def get_model_path(self) -> str: ...

    def get_results_file(self) -> str: ...

    def get_generation_logits_file(self) -> str: ...

    def get_context_logits_file(self) -> str: ...

    def get_cum_log_probs_file(self) -> str: ...

    def get_log_probs_file(self) -> str: ...

    def enable_context_fmha_fp32_acc(self) -> ModelSpec: ...

    def get_enable_context_fmha_fp32_acc(self) -> bool: ...

    def __copy__(self) -> ModelSpec: ...
