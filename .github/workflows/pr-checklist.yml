name: PR Checklist
on:
  pull_request_target:
    types: [opened, reopened, ready_for_review, synchronize]
  issue_comment:
    types: [created, edited]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check'
        required: true
        type: string

permissions:
  pull-requests: write
  statuses: write

jobs:
  checklist:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.draft == false || github.event.issue.pull_request
    steps:
      - name: Manage PR Checklist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR information based on event type
            let pr, prNumber;
            if (context.eventName === 'pull_request_target') {
              pr = context.payload.pull_request;
              prNumber = pr.number;
            } else if (context.eventName === 'issue_comment') {
              // For issue_comment events, get PR info from the issue
              if (!context.payload.issue.pull_request) {
                console.log('Comment is not on a PR, skipping');
                return;
              }
              prNumber = context.payload.issue.number;
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              pr = prData;
            } else if (context.eventName === 'workflow_dispatch') {
              // For manual dispatch, get PR info from input
              prNumber = parseInt(context.payload.inputs.pr_number);
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              pr = prData;
            } else {
              console.log('Unexpected event type:', context.eventName);
              return;
            }

            console.log(`Processing PR #${prNumber}`);

            const checklistBody = `## ðŸš€ PR Checklist

            - [ ] PR title follows format: \`[type] Description\`
            - [ ] PR description explains both **what** you're doing and **why**
            - [ ] Code conforms to coding conventions (see \`CODING_GUIDELINES.md\`)
            - [ ] Test cases added for new code
            - [ ] All existing tests pass
            - [ ] PR and commit messages cleaned up via \`git rebase -i\`

            ---
            **Please âœ… check the below item to confirm you've reviewed the checklist when ready for review!.**
            - [ ] **I have reviewed the above checklist and addressed all applicable items**`;

            // Get all comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            // Find checklist comment
            let checklistComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('PR Checklist')
            );

            // Post checklist if not exists
            if (!checklistComment &&
                (context.eventName === 'workflow_dispatch' ||
                 ['opened', 'reopened', 'ready_for_review'].includes(context.payload.action))) {
              const { data: newComment } = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: checklistBody
              });
              checklistComment = newComment;
              console.log('Posted PR checklist');
            }

            if (!checklistComment) {
              console.log('No checklist comment found');
              return;
            }

            // Parse the checklist comment to count checked items
            const checkboxRegex = /- \[([ x])\]/gi;
            const matches = [...checklistComment.body.matchAll(checkboxRegex)];
            const totalItems = matches.length;
            const checkedItems = matches.filter(match => match[1].toLowerCase() === 'x').length;

            console.log(`Checklist status: ${checkedItems}/${totalItems} items checked`);

            // Check if the acknowledgment checkbox (last one) is checked
            const lastCheckbox = matches[matches.length - 1];
            const isAcknowledged = lastCheckbox && lastCheckbox[1].toLowerCase() === 'x';

            // Determine status based on checked items
            let state, description;
            if (!isAcknowledged) {
              state = 'pending';
              description = `Please acknowledge the checklist`;
            } else {
              state = 'success';
              description = `Checklist acknowledged`;
            }

            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: state,
              context: 'PR Checklist',
              description: description,
              target_url: checklistComment.html_url
            });

            console.log(`Status: ${state} - ${description}`);

            // Add a helpful label based on checklist status
            const labels = {
              complete: 'checklist-complete',
              incomplete: 'checklist-incomplete'
            };

            try {
              // Remove both labels first
              for (const label of Object.values(labels)) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    name: label
                  });
                } catch (e) {
                  // Label might not exist, that's ok
                }
              }

              // Add appropriate label
              const labelToAdd = isAcknowledged ? labels.complete : labels.incomplete;
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: [labelToAdd]
              });
            } catch (e) {
              console.log('Could not update labels:', e.message);
            }
