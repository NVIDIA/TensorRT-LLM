name: PR Checklist
on:
  pull_request_target:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  pull-requests: write
  statuses: write

jobs:
  checklist:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Manage PR Checklist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const checklistBody = `## 🚀 PR Checklist

            Please review all applicable items before requesting a review:

            - [ ] PR title follows format: \`[JIRA/Issue][type] Description\`
            - [ ] PR description explains both **what** you're doing and **why**
            - [ ] Code conforms to coding conventions (see \`CODING_GUIDELINES.md\`)
            - [ ] Inputs validated and possible nullptr dereferences checked
            - [ ] Test cases added for new code
            - [ ] All existing tests pass
            - [ ] PR and commit messages cleaned up via \`git rebase -i\`

            ---
            **Please check the items and react with 👍 to acknowledge you've reviewed the checklist.**`;

            // Get all comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            // Find checklist comment
            let checklistComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('PR Checklist')
            );

            // Post checklist if not exists
            if (!checklistComment && ['opened', 'reopened', 'ready_for_review'].includes(context.payload.action)) {
              const { data: newComment } = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: checklistBody
              });
              checklistComment = newComment;
              console.log('Posted PR checklist');
            }

            if (!checklistComment) {
              console.log('No checklist comment found');
              return;
            }

            // Check for thumbs up reactions
            const { data: reactions } = await github.rest.reactions.listForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: checklistComment.id
            });

            const hasThumbsUp = reactions.some(reaction => reaction.content === '+1');

            // Update commit status (using plain text to avoid Unicode issues)
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: hasThumbsUp ? 'success' : 'pending',
              context: 'PR Checklist',
              description: hasThumbsUp
                ? 'Checklist acknowledged'
                : 'Please acknowledge the checklist with thumbs up',
              target_url: checklistComment.html_url
            });

            console.log(`Status: ${hasThumbsUp ? 'success' : 'pending'}`);
