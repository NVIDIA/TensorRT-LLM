# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow to display bot command help information
name: Bot-Command
on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  Bot-command-check:
    name: Bot command check
    if: github.event_name == 'pull_request' || startsWith(github.event.comment.body, '/bot')
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
    steps:
      - id: check
        name: Check bot command
        run: |
          if [[ "${{ github.event.comment.body }}" == "/bot run"* ]] ||
             [[ "${{ github.event.comment.body }}" == "/bot skip --comment"* ]] ||
             [[ "${{ github.event.comment.body }}" == "/bot reuse-pipeline"* ]] ||
             [[ "${{ github.event.comment.body }}" == "/bot kill"* ]]; then
            echo 'status=success' >> $GITHUB_OUTPUT
          else
            echo 'status=failure' >> $GITHUB_OUTPUT
          fi
      - name: Add bot help comment
        if: steps.check.outputs.status == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const helpMessage = "" +
            "## GitHub Bot Help\n\n" +
            "`/bot [-h] ['run', 'kill', 'skip', 'reuse-pipeline'] ...`\n\n" +
            "provides a user friendly way for developers to interact with a Jenkins server.\n\n" +
            "Run `/bot [-h|--help]` to print this help message.\n\n" +
            "See details below for each supported subcommand.\n\n" +
            "<details>\n\n" +
            "`run  [--disable-fail-fast  --skip-test  --stage-list \"A10-e2e-0, xxx\" --gpu-type \"A30, H100_PCIe\" --multi-gpu-test  --post-merge  --extra-stage \"H100_PCIe-[Post-Merge]accuracy-0, xxx\" --memory-profiling  --disable-incremental-build  --enable-publish-last-known-good ]`\n\n" +
            "Launch build/test pipelines. All previously running jobs will be killed.\n\n" +
            "`--skip-test ` *(OPTIONAL)* : Skip all test stages. Note: Does **NOT** update GitLab pipeline status.\n\n" +
            "`--stage-list \"A10-e2e-0, xxx\"` *(OPTIONAL)* : Only run the specified test stages. Examples: \"A10-e2e-0, xxx\". Note: Does **NOT** update GitLab pipeline status.\n\n" +
            "`--gpu-type \"A30, H100_PCIe\"` *(OPTIONAL)* : Only run the test stages on the specified GPU types. Examples: \"A30, H100_PCIe\". Note: Does **NOT** update GitLab pipeline status.\n\n" +
            "`--multi-gpu-test ` *(OPTIONAL)* : Only run the multi-GPU tests. Note: Does **NOT** update GitLab pipeline status.\n\n" +
            "`--post-merge ` *(OPTIONAL)* : Run the L0 post-merge pipeline instead of the ordinary L0 pre-merge pipeline.\n\n" +
            "`--extra-stage \"H100_PCIe-[Post-Merge]accuracy-0, xxx\"` *(OPTIONAL)* : Run the ordinary L0 pre-merge pipeline and specified test stages from the L0 post-merge pipeline. Examples: --extra-stage \"H100_PCIe-[Post-Merge]accuracy-0, xxx\".\n\n" +
            "`--memory-profiling ` *(OPTIONAL)* : Enable memory profiling in the test stages.\n\n" +
            "`--disable-incremental-build ` *(OPTIONAL)* : Disable incremental build. Note: Only impacts Windows builds that would otherwise be incremental.\n\n" +
            "`--enable-publish-last-known-good ` *(OPTIONAL)* : Enable LKG build image publishing. Note: Only impacts Windows builds that would otherwise not publish LKG.\n\n" +
            "### kill\n\n" +
            "`kill  `\n\n" +
            "Kill all running builds associated with merge request.\n\n" +
            "### skip\n\n" +
            "`skip --comment COMMENT `\n\n" +
            "Skip testing for latest commit on merge request. This action is restricted to admins. Please contact a maintainer/owner for the project if you would like to use this option.\n\n" +
            "### reuse-pipeline\n\n" +
            "`reuse-pipeline `\n\n" +
            "Reuse a previous pipeline to validate current commit. This action will also kill all currently running builds associated with the merge request. IMPORTANT NOTE: This is dangerous since lack of user care and validation can cause top of tree to break.\n\n" +
            "</details>";
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: helpMessage
              });
            } catch (error) {
              console.error('Failed to create comment:', error);
              core.setFailed('Failed to add help comment');
            }
